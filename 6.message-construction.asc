== ch6. Message Construction.

* 메시지는 Sender와 Receiver 사이의 의도(intent)가 잘 드러내야 한다.
* EIP에서 보여주는 것들.
** **Message intent**: 메시지를 왜 보내려는 지?
*** **Command**: Actor에 어떤 명령을 내리고 싶을 때.
*** **Event**: 행위(Operation)을 다른 Actor에게 알려주고 싶을 때.
*** **Document**: Requester에게 큰 정보를 전달하고 싶을 때.
** **Returning Message**: Request-Reply Contract.
*** **Command** - **Document**: Request가 Command면 보통 Document를 Reply로 반환한다.
*** Actor Model은 항상 Sender의 Return Address를 알고 있다는 특징이 있다.
** **Huge amounts of data**: 여러 메시지를 하나로 묶을 때.
*** 순서 안중요: **Correlation Identifier**
*** 순서 중요: **Message Sequence**
** **Slow Message**: 레이턴시 큰 경우에...
*** Message Expiration:
*** Dead Letter Channel:
** **Message version**:
*** **Format Indicator**: 메시지 버전이 필요할 때.

=== Command & Document & Event

의도! 의도! 의도!

**Command Message**: Actor에 어떤 명령을 내리고 싶을 때:

image::img/figure-6-1.png[]

* 해당 명령에 필요한 데이터가 포함된다. 즉 Sender가 Receiver의 동작을 이해하고 있어야 하는 측면이 있다.
* Receiver의 행동을 알고 보내는 측면이 있기 때문에 보통 Point-To-Point Channel로 보낸다.


**Document Message**: 순수하게 데이터를 전송하기 위함이다.

image::img/figure-6-2.png[]

* Domain 데이터다.
* 보통 Request-Reply 구조에서 Reply Message가 Document Message인 경우가 많다.

**Event Message** : Actor에서 일어난 일을 담는다.

image::img/figure-6-3.png[]

* Sender의 정보를 Receiver에게 보내는 것이고 Recevier와 큰 상관이 없다는 측면에서 보면 Pub-Sub Channel을 통해서 Broadcast하는 메시지들은 보통 Event Message라고 할 수 있다.


* Command-Query Separation Principle(CQS) 참고하라고.
** (http://martinfowler.com/bliki/CommandQuerySeparation.html 참고)
** Commands: Change the state of a system but do not return a value(side-effect).
** Queries: Return a result and do not change the observable state of the system (are free of side effects).
** 마음 속으로 CQS를 염두에 두고 설계하는 것은 중요하지만 CQS가 항상 좋은 것은 아니다.
** 시스템에 따라서 Command를 받아서 상태를 변경하고 response 메시지를 보내는 것이 나을 수도 있다.
** __CQS를 따르는 Rest API의 예__
*** CQS for C: POST Request(Command Message)를 보내고 '201 Created'와 Location을 받는다.
*** CQS for Q: GET Request(Command Message)를 보내고 '200 OK'를 받는다.

Aggregator(7장)에 보내는 예제를 살펴본다:

[source,text]
----
Someone -(RequestForQuotation)-> OrderProcessor <1>

OrderProcessor -(fulfill the quotations)-> ProductDiscouter <2>

ProductDiscounter -(PriceQuote)-> OrderProcessor <3>

OrderProcessor -(PriceQuoteFulfilled)-> Aggregator <4>
----
<1> OrderProcessor는 더 Discount를 해달라는 Message를 받는다.
<2> ProductDiscounter는 얼마나 깍아줄 수 있냐는 Message를 받는다.
<3> OrderProcessor는 얼마나 깍아줄 수 있는지에 대한 Document Message를 받는다.
<4> Aggregator에는 Document Message인 PriceQuote를 보내는 것이 아니라 PriceQuoteFulfilled라는 Event 메시지를 보낸다.

[source,scala]
----
// Document Message
case class PriceQuote(
  quoterId: String,
  rfqId: String,
  itemId: String,
  retailPrice: Double,
  discountPrice: Double)

// Event Message
case class PriceQuoteFulfilled(priceQuote: PriceQuote) // <1>
----
<1> Aggregator에 Command Message나 Document Message를 보내도 되지만 Event Message로 보내는 이유는 OrderProcessor가 Aggregator가 어떻게 동작하는지 알 필요가 없고 그냥 Contract만 맞추면 되기 때문이다.

* PriceQuoteFulfilled에 PriceQuote를 넣어서 보내는 Event Message를 추가로 정의해서 보낸다.

**__메시지를 보낼때 의도가 다르면 새 메시지를 생성해서 보내는 것이 중요하다고 볼 수 있겠다.__**

=== Managing Flow and Process

오래걸리는 Long-running Process는 몇 단계에 걸쳐서 처리하게 되는데 이 때 Document Message가 사용된다. 각 단계마다 Document Message를 모아서 처리한다.

이런 complex routing에는 Process Manager(7장)을 사용한다.

[source,scala]
----
case class QuotationFulfillment(
  rfqId: String,
  quotesRequested: Int,
  priceQuotes: Seq[PriceQuote], // <1>
  requester: ActorRef) {

  def appendWith(fulfilledPriceQuote: PriceQuote): // <2> QuotationFulfillment {
    QuotationFulfillment(rfqId,
      quotesRequested,
      priceQuotes :+ fulfilledPriceQuote,
      requester)
  }
}
----
<1> 하위 process에서 처리된 결과(PriceQuote)를 취합한다.
<2> PriceQuote도 Document Message이고 QuotationFulfillment도 Document Message이다.

=== Request-Reply

Request-Reply의 가장 일반적인 모습:

image::img/figure-6-4.png[]

* Request: Command Message
* Reply: Document Message

이 경우에 Command Message를 Query Message(IDDD)라고 부르기도 한다.

=== Return Address

image::img/figure-6-5.png[]

Message에 Rely address를 넣어서 보낸다. reply는 Reply Address에 한다:

`case class Request(what: String, replyTo: ActorRef)`

* Akka에서는
** sender: Recevier가 항상 sender를 알고 있다.
** forward: forward하면 sender가 유지된다.
*** `A tell B forward C`라고 하면 Actor C의 sender는 A다.
*** 실제 코드는 `worker forward request`다. request 메시지를 worker에게 forward하는 것>

=== Correlation Identifier

image::img/figure-6-6.png[]

* 일종의 Business id? transaction id? 같은 것.
* __보통은 business id라고 많이 불렀었는데 Correlation Identifier라는 이름이다__

[source,scala]
----
case class RequestPriceQuote(
  rfqId: String,
  itemId: String,
  retailPrice: Double,
  orderTotalRetailPrice: Double)

case class PriceQuote(
  quoterId: String,
  rfqId: String,
  itemId: String,
  retailPrice: Double,
  discountPrice: Double)

case class PriceQuoteTimedOut(rfqId: String)

case class RequiredPriceQuotesForFulfillment(
  rfqId: String,
  quotesRequested: Int)

case class QuotationFulfillment(
  rfqId: String,
  quotesRequested: Int,
  priceQuotes: Seq[PriceQuote],
  requester: ActorRef)

case class BestPriceQuotation(
  rfqId: String, // <1>
  priceQuotes: Seq[PriceQuote])
----
<1> rfqId(request for quotation ID): 어떤 맥락을 의미하는 id다. 예제를 보면 알겠지만 어떤 맥락에 따라 여러 메시지들이 연관된다.

* Long-Running Process에서 rfqId가 유용하다 하겠다. Process Manager(7장)에서 다시 다룬다).

=== Message Sequence

메시지를 여러개로 쪼개서 보내는 것.

각 메시지에는 아래와 같은 정보가 들어간다:

* `rfqId`
* secuence number
* 플래그, 상태, 전체 메시지 크기, 메시지의 시작인지 끝인지 같은것.

Resequencer(7장)에서 Message Sequence를 사용한다.

. Batch-Sender가 메시지를 비동기로 Batch-Receiver에게 보낸다.
. Batch-Receiver는 Sequence를 보고 이가 빠진 메시지를 확인 할 수 있다.
. Batch-Receiver가 Batch-Sender와 통신해서 이 빠진 문제를 해결할 때는 Polling Consumer(9장)을 참고한다.
.* Polling Consumer: Recevier가 요청한 Sequence대로 하나씩 보낸다.

=== Message Expiration

image::img/figure-6-7.png[]

* Message에 timeout을 거는 것.
* Process 전체에 어떤 제약을 두는 방법도 있지만 각 메시지에 Timeout을 거는 게 나은 경우가 있다. 그 때 이걸 사용한다.
* Timeout이 되면 Dead Letter 채널로 빠지도록 한다. 그러면 Sender가 Timeout됐는지 알 수 있다.
* Akka의 Mailbox는 Timeout을 지원하지 않는다. 직접 만들어야 한다.

[source,scala]
----
trait ExpiringMessage {
  val occurredOn = System.currentTimeMillis() // <1>
  val timeToLive: Long // <2>

  def isExpired(): Boolean = { // <3>
    val elapsed = System.currentTimeMillis() - occurredOn

    elapsed > timeToLive
  }
}
----
<1> 메시지가 생성된 시간
<2> TTL
<3> TTL이 지났는지 확인.

이 메시지를 잘 동작하도록 구현한 Router를 만들어 사용할 수 있다. 그 라우터는 Content-Based Router(7장)이나, Resequencer(7장)가 된다.

https://github.com/VaughnVernon/ReactiveMessagingPatterns_ActorModel/tree/master/src/co/vaughnvernon/reactiveenterprise/messageexpiration[전체 소스]


=== Format Indicator

* Message의 버전이 필요할 때
* 추가되는 요소
** Version Number: Message 버전
** Foreign Key: 해당 버전 Message 스키마나 그 URL을 담는다. 스키마 자체를 말하지 않는다.
** Foramt Document: 스키마 자체를 의미한다. Message 크기가 커지는 게 단점이다. __이걸 굳이 구분하는 이유는 모르겠다__
** 추가 되는 데이터 필드들.

아래와 같이 version을 관리한다:

----
// version 1
case class ExecuteBuyOrder(
    portfolioId: String,
    symbol: String,
    quantity: Int,
    price: Money,
    version: Int) {

  def this(portfolioId: String, symbol: String,
      quantity: Int, price: Money) =
      this(portfolioId, symbol, quantity, price , 1)
}

// version 2
case class ExecuteBuyOrder(
    portfolioId: String,
    symbol: String,
    quantity: Int,
    price: Money,
    dateTimeOrdered: Date, // <1>
    version: Int) {

  def this(portfolioId: String, symbol: String,
      quantity: Int, price: Money) =
      this(portfolioId, symbol, quantity, price, new Date(), 2) // <2>
}
----
<1> version 2에 추가된 항목을 추가한다.
<2> version 2라고 명시.

image::img/figure-6-8.png[]

__이런 그림이 된다. Minor 변경은 적절할 것 같은데 Major 변경은 역시 개비해야 겠지.........___

=== Summary
