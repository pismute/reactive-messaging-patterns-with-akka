== ch5. Messaging channels

이번 장에 대한 소개

* Point to Point channel
* publish subscribe channel
* Datatype channel
* Invalid Message channel
* Dead letter channel
* Guaranteed Delivery
* Channel Adapter
* Message Bridge
* Message Bus

.EIP 패턴과 연결하면
[cols="^1,^2",frame="topbot",options="header,footer"]
|======================
| EIP | 책
|One to One |Point to Point Channel
|One to Many |Publish Subscribe Channel
|What type of data |Datatype Channel
|Invalid and dead message |Invalid Message Channel, Dead letter channel
|Crash Proof |Guaranteed Delivery
|non messaging clients, adaptive messaging channels |channel adapter, message bridge
|communications backbone |message bus
|======================

=== Point to Point Channel

image::img/5-1.png[]

* 모든 메시지 채널(메세지 생산자와 소비자가 통신하는 것, 모두 decouple
        되어있어야함)은 Point to Point Channel

image::img/5-2.png[]

* Event driven counsumer
* **Sequential message delivery**, 기본적으로 mailbox는 FIFO

=== Publish Subscribe Channel

image::img/5-3.png[]

* Publish Subscribe pattern (POSA1)
** Publisher
** Subscriber
* Observer Pattern (GoF)
** Observer: Publisher에 해당.
** Subject: Subscriber에 해당

image::img/5-4.png[]

==== Local Event Stream

* 내장 pub-sub 채널은 Event Bus trait을 사용
* Event Bus의 표준 인스턴스는 Event Stream
* LookupClassification : event type을 활용(Event:Classifier=1:1)
* SubchannelClassification : event type, subtype을 활용(Event:Classifier=1:n)
* ScanningClassification : matches 함수를 활용(Event:Classifier=1:n)

image::img/5-5.png[]

.DeadLetter를 subscribe하는 예제
[source, scala]
----
val system = ActorSystem("TradingSystem")

val sysListener = system.actorOf(Props[SystemListener], "sysListener")

system.eventStream.subscribe(sysListener, classOf[akka.actor.DeadLetter])
----

==== Distributed Publish-Subscribe

* 내장 Akka cluster에서 사용가능한 내장 pub-sub 채널
* Cluster 내에 있는 어딘가의 하나의 actor 혹은 여러 actor에 메시지를 전달
* DistributedPubSubMediator를 사용해서 처리
* Mediator는 모든 node에서 동작해야 하며, 모든 pub-sub 토픽에 참여 하거나 sender-receiver 공동 작업이 가능해야함

image::img/5-6.png[]

* role - role 이름이 주어지면 cluster nodes에서 시작이 가능하며, “”으로 시작하면 모든 클러스터 노드에서 시작한다.
* routing-logic 하나의 클러스터가 multiple actor에 send하는 경우 (publish 말고) - random, RR, braodcast
* gossip-interval mediator끼리 통신하는 시간 (각자의 가입자들을 공유 함)
* removed-time-to-live mediator에서 삭제된 node들 정보 공유

image::img/5-7.png[]

actor가 종료 되면, 로컬 mediator에서 자동으로 unregister, unsubscribe된다.

어떻게 사용하는 지는 대충 이렇게: http://eweise.com/articles/akka-cluster-example/[]

==== Datatype Channel

image::img/5-8.png[]

* 들어오는 메시지의 data type을 알아야한다.

image::img/5-9.png[]

Actor model을 사용한다면 일반적으로 type safe message를 사용하기 때문에 수월함

가끔 이 기종 연결에서 문제가 있음 예를 들어 RabbitMQ or JMS라고 할때 모든 메세지가 binary byte array로 들어온다. **Message Translator**를 사용해서 해당 메시지를 convert해서 사용해야한다.

=== Invalid Message Channel

image::img/5-10.png[]

메세지 채널에서 메세지를 보낸다는 것은 메세지의 타입이 리시버에 의해 받아졌다는 것을 의미한다. 받은 메시지가 해석이 안되는 경우 Invalid message로 처리

image::img/5-11.png[]

Authenticator같은 경우에 사용 가능. Pipes and Filters를 사용 해서 메시지를 처리하고 invalid 경우 로깅, noti등 처리 한다.

=== Dead Letter Channel

image::img/5-12.png[]

메시지가 전송되지 못하는 경우

image::img/5-13.png[]

* dead letter가 생기는 이유
** local actor 에서 다른 local actor로 메시지를 보내는데 actor가 죽어있는 경우
** 다른 node의 actor로 메시지를 보내는데 네트워크 연결이 끊어진 경우
** 네트워크가 연결잘되어있는 다른 node의 actor로 메시지 보내지만 actor가 죽어있는 경우

**Guranteed Delivery**를 위해서 필요한 것이 DeadLetter 시스템임

=== Guaranteed Delivery

image::img/guaranteed-delivery.png[]

* Message가 Receiver에 적어도 한번(At least once) 전송되는 것을 보장한다.
** 보낸 Message는 Message Store(10장)에 저장(journal)해두고 수신이 확인될 때까지 주기적으로 재전송한다.
** Message를 삭제해주지 않으면 모든 Message는 permanently 저장된다.
** 보통은 한번에 Confirmation 메시지를 받는다. 그러면 Akka가 재전송되지 않도록 보장한다.

image::img/figure-5-7.png["Akka's Guaranteed Delivery contract"]

[NOTE]
====
https://github.com/kpug/akka-in-action/blob/master/wiki/14-actor-persistence.asc#1421-persistent-actor[Akka In Action 14장 참고]
====

[source,scala]
----
class LoanBroker
    extends PersistentActor
        with AtLeastOnceDelivery { // <1>
  ...
  override def receiveRecover: Receive = {
    case event: LoanRateQuoteRequested =>
      updateWith(event)

      deliver(event.loanRateQuotePath, // <2>
              id => StartLoanRateQuote(totalBanks, id))

    case started: LoanRateQuoteStarted =>
      confirmDelivery(started.id) // <3>

  ...
  }
  ...
}
----
<1> AtLeastOnceDelivery Trait을 mixin
<2> 해당 path의 Actor로 메시지를 전송한다. 넘기는 함수를 deliveryId to Message 함수다. **이미 전송했으므로 Recovery시 다시 deliver하지 않도록 구현해야 한다.**
<3> 해당 Actor로부터 Confirmation 메시지를 받으면 잘 전송됐음을 저장한다.

모든 Actor가 Guaranteed Delivery가 되도룩 구성하면 아래 그림처럼 된다:

image::img/figure-5-8.png[]

AtLeastOnceDelivery 설정 Factor:

* `akka.persistence.at-least-once-delivery.redeliver-interval`: Redelivery interval.
** Actor에서 `redeliverInterval()` 함수를 오버라이드할 수도 있다.
* `akka.persistence.at-least-once-delivery.max-unconfirmed- messages`: 메모리에서 Confirmation을 기다리는 메시지의 수.
** Actor에서 `maxUnconfirmedMessages()`로 오버라이드할 수도 있다.
* `akka.persistence.at-least-once-delivery.warn-after-number-of- unconfirmed-attempts`: Delivery를 시다하다가 이 수만큼 실패하면 `AtLeastOnceDelivery.UncocnfirmedWarning` 메시지를 보내준다.
** 이 메시지가 오면 `confirmDelivery()`를 호출해서 Delivery를 취소하거나 할 수 있다.
** Actor의  `warnAfterNumberOfUnconfirmedAttempts()`를 오버라이드할 수도 있다.
* `akka.persistence.at-least-once-delivery.redelivery-burst-
limit`: Redelivery burst할 때 보내지는 최대 메시지 수
** Redelivery burst?
*** 문맥상 최대 재시도 횟 수 이거나
*** 동시에 Redelivery를 시도하는 최대 메세지 수 일 듯.
** burst frequency is half of the redelivery interval
** Actor에서 `redeliveryBustLinit()`을 오버라이드 할 수도 있다.

[NOTE]
====
Akka In Action에서는 Local에서는 믿고 쓴다고 하고 Remote Actor의 경우에는 https://github.com/pismute/akka-in-action/blob/master/wiki/10-message-channels.asc#1022-guaranteed-delivery[Reliable Proxy]로 해결한다고 했었다.
====

=== Channel Adapter

image::img/channel-adapter.png[]

* Channel Adapter는 Message Endpoint다(System Boundary의)
* Translation이 필요하면 Message Translator를 사용한다.
* IDDL의 Ports and Adapters architecture와 Anti-Corruption Layer와 관련이 있다는데 뭔말인지 모르겠다.

image::img/figure-5-9.png[]

Message Bus(5장)을 사용하는 Actor-based Channel Adapter 예제:

[source,scala]
----
class StockTrader(tradingBus: ActorRef) extends Actor {
  val applicationId = self.path.name

  tradingBus !
    RegisterCommandHandler(applicationId, "ExecuteBuyOrder", self)

  tradingBus !
    RegisterCommandHandler(applicationId, "ExecuteSellOrder", self)

  def receive = { // <1>
    case buy: ExecuteBuyOrder =>
      val result =
        buyerService.placeBuyOrder(buy.portfolioId, buy.symbol,
                                   buy.quantity, buy.price)

      tradingBus !
        TradingNotification("BuyOrderExecuted",
                            BuyOrderExecuted(result.portfolioId,
                                             result.orderId,
                                             result.symbol,
                                             result.quantity,
                                             result.totalCost))

    case sell: ExecuteSellOrder =>
      val result = // <2>
        sellerService.placeSellOrder(buy.portfolioId, buy.symbol,
                                     buy.quantity, buy.price)

      tradingBus !
        TradingNotification("SellOrderExecuted",
                            SellOrderExecuted(result.portfolioId,
                                              result.orderId,
                                              result.symbol,
                                              result.quantity,
                                              result.totalCost))
  }
}
----
<1> Message Bus에서 두 메시지를 받는다.
<2> 메시지를 Translation해서 서비스를 호출.

=== Message Bridge

image::img/message-bridge.png[]

* http://www.enterpriseintegrationpatterns.com/patterns/messaging/MessagingBridge.html[The Messaging Bridge is a set of Channel Adapters]

* 정의: ** System 1 --- Messaging --- System 2 **
** 두 시스템을 어떻게 통합하면 좋을까?
* 예제: ** .NET --- RabbitMQ --- AKKA **
** 이렇게 구현해야 하는 상황이라면 어떻게?
* 해답: ** .NET --- RabbitMQ --- Message Bridge --- AKKA **
** EIP의 제안: Message Bridge를 만들자.

[source,scala]
----
class InventoryProductAllocationBridge(config: RabbitMQBridgeConfig)
        extends RabbitMQBridgeActor(config) {

  private val log: LoggingAdapter = Logging.getLogger(context.system, self)

  def receive = {
    case message: RabbitMQBinaryMessage => // <1>
      log.error("Binary messages not supported.")
    case message: RabbitMQTextMessage => // <1>
      log.error(s"Received text message: ${message.textMessage}")
    case invalid: Any =>
      log.error(s"Don't understand message: $invalid")
  }
}
----
<1> RabbitMQBridgeActor가 MQ 메시지를 Actor Message로 변환해준다. 자세한 것은 http://github.com/VaughnVernon/ReactiveMessagingPatterns_ActorModel/tree/master/src/co/vaughnvernon/reactiveenterprise/messagingbridge[RabbitMQBridgeActor] 참고:

=== Message Bus

image::img/message-bus.png[]

* 일종의 Content-Based Router
* 기능만 보면 Event Bus와 비슷한데...

image::img/figure-5-11.png[]

[source,scala]
----
def receive = {
  case register: RegisterCommandHandler => // <1>
    println(s"TradingBus: registering: $register")
    registerCommandHandler(register.commandId, register.applicationId, register.handler)
    notifyStartWhenReady()

  case command: TradingCommand => // <2>
    println(s"TradingBus: dispatching command: $command")
    dispatchCommand(command)

  ...

  case message: Any =>
    println(s"TradingBus: received unexpected: $message")
}
----
<1> Listener를 등록.
<2> 등록된 Listener들에게 Command 전달.

https://github.com/VaughnVernon/ReactiveMessagingPatterns_ActorModel/blob/master/src/co/vaughnvernon/reactiveenterprise/messagebus/MessageBus.scala[MessageBus 전체 소스]:

=== Summary
